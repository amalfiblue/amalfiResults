name: Deploy to AWS ECR and EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Flask app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./flask_app/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push FastAPI app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./fastapi_app/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Force pull the latest images
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest --quiet
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest --quiet
            
            # Stop and remove existing containers
            docker-compose -f ~/amalfiResults/docker-compose.yml down || true
            
            # Create amalfi_network if it doesn't exist
            docker network inspect amalfi_network >/dev/null 2>&1 || docker network create amalfi_network
            
            # Prune Docker system to free up disk space (preserving volumes)
            docker system prune -af
            
            # Create or update docker-compose.yml
            mkdir -p ~/amalfiResults
            cat > ~/amalfiResults/docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              flask_app:
                container_name: results_flask_app
                image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest
                pull_policy: always
                environment:
                  - FLASK_APP=app.py
                  - FLASK_ENV=production
                  - FASTAPI_URL=http://results_fastapi_app:8000
                restart: always
                volumes:
                  - shared_data:/app/data
                  - ./wait-for-fastapi.sh:/wait-for-fastapi.sh
                depends_on:
                  - fastapi_app
                command: ["/wait-for-fastapi.sh", "python", "app.py"]
                networks:
                  - amalfi_network
                expose:
                  - 5000
            
              fastapi_app:
                container_name: results_fastapi_app
                image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest
                pull_policy: always
                environment:
                  - FLASK_APP_URL=http://results_flask_app:5000/api/notify
                restart: always
                volumes:
                  - shared_data:/app/data
                networks:
                  - amalfi_network
                expose:
                  - 8000
                  
            networks:
              amalfi_network:
                external: true
                
            volumes:
              shared_data:
                driver: local
            EOL
            
            # Copy wait-for-fastapi.sh script
            cat > ~/amalfiResults/wait-for-fastapi.sh << 'EOL'
            set -e

            max_retries=30
            retry_interval=2
            retry_count=0

            echo "Waiting for FastAPI service to be available..."

            while [ $retry_count -lt $max_retries ]; do
              if ip=$(getent hosts results_fastapi_app | awk '{ print $1 }'); then
                echo "FastAPI service IP resolved: $ip"
                
                if curl -s -o /dev/null -w "%{http_code}" "http://$ip:8000/api/health" | grep -q "200"; then
                  echo "FastAPI service is available!"
                  export FASTAPI_URL="http://$ip:8000"
                  exec "$@"
                  exit 0
                else
                  echo "FastAPI service not yet responsive, waiting..."
                fi
              else
                echo "Could not resolve FastAPI service IP, trying direct IP resolution..."
                
                if ip=$(ping -c 1 -W 1 results_fastapi_app | grep PING | awk -F'[()]' '{print $2}'); then
                  echo "FastAPI IP from ping: $ip"
                  export FASTAPI_URL="http://$ip:8000"
                  
                  if curl -s -o /dev/null -w "%{http_code}" "http://$ip:8000/api/health" | grep -q "200"; then
                    echo "FastAPI service is available!"
                    exec "$@"
                    exit 0
                  fi
                fi
              fi
              
              retry_count=$((retry_count+1))
              echo "Retry $retry_count/$max_retries... waiting for FastAPI service"
              sleep $retry_interval
            done

            echo "Could not connect to FastAPI service after $max_retries attempts."
            echo "Falling back to hostname, but DNS resolution may still fail."
            export FASTAPI_URL="http://results_fastapi_app:8000"
            exec "$@"
            EOL
            
            # Make the script executable
            chmod +x ~/amalfiResults/wait-for-fastapi.sh
            
            # Ensure latest images are pulled and start the containers with force
            docker-compose -f ~/amalfiResults/docker-compose.yml pull --ignore-pull-failures
            docker-compose -f ~/amalfiResults/docker-compose.yml up -d --force-recreate --remove-orphans
            
            # Verify deployment
            docker ps
