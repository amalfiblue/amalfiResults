name: Deploy to AWS ECR and EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Flask app
        uses: docker/build-push-action@v4
        with:
          context: ./flask_app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push FastAPI app
        uses: docker/build-push-action@v4
        with:
          context: ./fastapi_app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Force pull the latest images
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest --quiet
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest --quiet
            
            # Stop and remove existing containers
            docker-compose -f ~/amalfiResults/docker-compose.yml down || true
            
            # Create amalfi_network if it doesn't exist
            docker network inspect amalfi_network >/dev/null 2>&1 || docker network create amalfi_network
            
            # Prune Docker system to free up disk space
            docker system prune -af --volumes
            
            # Create or update docker-compose.yml
            mkdir -p ~/amalfiResults
            cat > ~/amalfiResults/docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              flask_app:
                container_name: results_flask_app
                image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FLASK }}:latest
                pull_policy: always
                environment:
                  - FLASK_APP=app.py
                  - FLASK_ENV=production
                  - FASTAPI_URL=http://results_fastapi_app:8000
                restart: always
                volumes:
                  - flask_data:/app/data
                depends_on:
                  - fastapi_app
                networks:
                  - amalfi_network
                expose:
                  - 5000
            
              fastapi_app:
                container_name: results_fastapi_app
                image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FASTAPI }}:latest
                pull_policy: always
                environment:
                  - FLASK_APP_URL=http://results_flask_app:5000/api/notify
                restart: always
                volumes:
                  - fastapi_data:/app/data
                networks:
                  - amalfi_network
                expose:
                  - 8000
                  
            networks:
              amalfi_network:
                external: true
                
            volumes:
              fastapi_data:
                driver: local
              flask_data:
                driver: local
            EOL
            
            # Ensure latest images are pulled and start the containers with force
            docker-compose -f ~/amalfiResults/docker-compose.yml pull --ignore-pull-failures
            docker-compose -f ~/amalfiResults/docker-compose.yml up -d --force-recreate --remove-orphans
            
            # Verify deployment
            docker ps
